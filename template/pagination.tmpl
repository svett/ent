{{ define "pagination" }}
{{ $pkg := base $.Config.Package }}
{{ template "header" $ }}

import (
	"encoding/base64"
	"encoding/json"
	"fmt"
	"reflect"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/jmoiron/sqlx/reflectx"
)

var mapper = reflectx.NewMapper("json")

// Predicate creates a predicate
type Predicate = func(s *sql.Selector)

// CursorPosition represets a cursor position
type CursorPosition struct {
	Column    string
	Direction string
	Value     interface{}
}

// Equal return true if the position is equal
func (p *CursorPosition) Equal(n *CursorPosition) bool {
	return strings.EqualFold(p.Column, n.Column) &&
		strings.EqualFold(p.Direction, n.Direction)
}

// Cursor represents the cursor
type Cursor []*CursorPosition

// DecodeCursor decodes a cursor from its base-64 string representation.
func DecodeCursor(token, order string) (*Cursor, error) {
	cursor := &Cursor{}

	if token == "" {
		return cursor.apply(order)
	}

	if n := len(token) % 4; n != 0 {
		token += strings.Repeat("=", 4-n)
	}

	data, err := base64.URLEncoding.DecodeString(token)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal(data, cursor); err != nil {
		return nil, err
	}

	return cursor.apply(order)
}

// String returns a base-64 string representation of a cursor.
func (c *Cursor) String() string {
	if c == nil || len(*c) == 0 {
		return ""
	}

	data, err := json.Marshal(c)
	if err != nil {
		panic(err)
	}

	return strings.TrimRight(base64.URLEncoding.EncodeToString(data), "=")
}

// Next returns the next cursor
func (c *Cursor) Next(input interface{}) *Cursor {
	var (
		next   = Cursor{}
		source = reflect.ValueOf(input)
	)

	if source.Type().Kind() == reflect.Slice {
		if source.Len() == 0 {
			return &next
		}

		source = source.Index(source.Len() - 1)
	}

	for _, position := range *c {
		index := &CursorPosition{
			Column:    position.Column,
			Direction: position.Direction,
			Value:     mapper.FieldByName(source, position.Column).Interface(),
		}

		next = append(next, index)
	}

	return &next
}

func (c *Cursor) apply(order string) (*Cursor, error) {
	const (
		separator = ","
		asc       = "+"
		desc      = "-"
	)

	var (
		count = len(*c)
		empty = count == 0
	)

	for index, field := range strings.Split(order, separator) {
		field = strings.TrimSpace(field)

		position := &CursorPosition{
			Column:    field,
			Direction: asc,
		}

		switch {
		case strings.HasPrefix(field, asc):
			position = &CursorPosition{
				Column:    field[1:],
				Direction: asc,
			}
		case strings.HasPrefix(field, desc):
			position = &CursorPosition{
				Column:    field[1:],
				Direction: desc,
			}
		}

		switch {
		case empty:
			*c = append(*c, position)
		case index >= count:
			return nil, fmt.Errorf("ent: invalid pagination token position")
		case !position.Equal((*c)[index]):
			return nil, fmt.Errorf("ent: mismatched pagination token position")
		}
	}

	return c, nil
}

// Pagination represents the pagination
type Pagination struct {
	Predicate Predicate
	Order     []Predicate
	Limit     int
}

// WithLimit returns the pagination with given limit
func (pg Pagination) WIthLimit(limit int) *Pagination {
	pg.Limit = limit
  return &pg
}

// Start sets the pagination
func (pg *Pagination) Start(cursor *Cursor) {
	pg.Predicate = pg.apply(*cursor)

	for _, position := range *cursor {
		switch position.Direction {
		case "+":
			pg.Order = append(pg.Order, pg.asc(position.Column))
		case "-":
			pg.Order = append(pg.Order, pg.desc(position.Column))
		}
	}
}

func (pg *Pagination) apply(positions []*CursorPosition) Predicate {
	var (
		predicate Predicate = func(*sql.Selector) {}
		position            = positions[0]
	)

	if position.Value != nil {
		switch position.Direction {
		case "+":
			predicate = pg.gt(position.Column, position.Value)
		case "-":
			predicate = pg.lt(position.Column, position.Value)
		default:
			predicate = pg.gt(position.Column, position.Value)
		}
	}

	positions = positions[1:]

	if len(positions) > 0 {
		predicate = pg.or(predicate, pg.apply(positions))
	}

	return predicate
}

func (pg *Pagination) gt(field string, value interface{}) Predicate {
	return func(s *sql.Selector) {
		s.Where(sql.GT(s.C(field), value))
	}
}

func (pg *Pagination) lt(field string, value interface{}) Predicate {
	return func(s *sql.Selector) {
		s.Where(sql.LT(s.C(field), value))
	}
}

func (pg *Pagination) and(predicates ...Predicate) Predicate {
	return func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	}
}

func (pg *Pagination) or(predicates ...Predicate) Predicate {
	return func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	}
}

func (pg *Pagination) asc(fields ...string) Predicate {
	return func(s *sql.Selector) {
		for _, f := range fields {
			s.OrderBy(sql.Asc(f))
		}
	}
}

func (pg *Pagination) desc(fields ...string) Predicate {
	return func(s *sql.Selector) {
		for _, f := range fields {
			s.OrderBy(sql.Desc(f))
		}
	}
}

{{ end }}
